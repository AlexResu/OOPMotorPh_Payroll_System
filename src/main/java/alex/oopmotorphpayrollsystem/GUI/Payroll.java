/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package alex.oopmotorphpayrollsystem.GUI;

import alex.oopmotorphpayrollsystem.AccountAccess;
import alex.oopmotorphpayrollsystem.*;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex Resurreccion
 */
public class Payroll extends javax.swing.JPanel {
    private AccountAccess account;
    private HRPersonnel user;

    /**
     * Creates new form Payroll
     */
    public Payroll() {
        initComponents();
    }
    
    public Payroll(AccountAccess account, HRPersonnel user) {
        this.account = account;
        this.user = user;
        initComponents();
        populateWeekComboBox();
        loadPayrollData();
    }
    
    private void populateWeekComboBox() {
        Map<String, String[]> valueMap = generateMondayValues();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        // Populate JComboBox with formatted week ranges
        for (String displayText : valueMap.keySet()) {
            model.addElement(displayText);
        }

        selectPeriodValue.setModel(model);
        selectPeriodValue.putClientProperty("valueMap", valueMap); // Store mapping

        // Set default selected value to the latest Monday
        if (model.getSize() > 0) {
            selectPeriodValue.setSelectedIndex(0);
        }
    }

    private Map<String, String[]> generateMondayValues() {
        Map<String, String[]> map = new LinkedHashMap<>();
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd yyyy");
        Calendar calendar = Calendar.getInstance();

        // Move to the latest Monday
        if (calendar.get(Calendar.DAY_OF_WEEK) != Calendar.MONDAY) {
            calendar.add(Calendar.DAY_OF_WEEK, -((calendar.get(Calendar.DAY_OF_WEEK) + 5) % 7));
        }

        // Generate past 3 months of Mondays (about 12 weeks)
        for (int i = 0; i < 104; i++) {
            String startDate = sdf.format(calendar.getTime()); // Monday
            calendar.add(Calendar.DATE, 6); // Move to Sunday
            String endDate = sdf.format(calendar.getTime()); // Sunday

            map.put(startDate + " - " + endDate, new String[]{startDate, endDate});

            calendar.add(Calendar.DATE, -13); // Move back to the previous Monday
        }

        return map;
    }
    
    private Date[] getSelectedWeekDates() {
        String selectedText = (String) selectPeriodValue.getSelectedItem();
        Map<String, String> valueMap = (Map<String, String>) selectPeriodValue.getClientProperty("valueMap");

        if (valueMap != null && selectedText != null) {
            String[] dates = selectedText.split(" - "); // Extract "March 11" and "March 17"

            if (dates.length == 2) {
                SimpleDateFormat sdf = new SimpleDateFormat("MMMM dd yyyy");
                int currentYear = Calendar.getInstance().get(Calendar.YEAR); // Use the current year

                try {
                    Date startDate = sdf.parse(dates[0] + " " + currentYear);
                    Date endDate = sdf.parse(dates[1] + " " + currentYear);
                    return new Date[]{startDate, endDate}; // Return both dates
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return null; // Return null if parsing fails
    }
    
    private void loadPayrollData(){
        Date[] selectedDates = getSelectedWeekDates();
        String status = (String) selectStatusValue.getSelectedItem();
        List<Map<String, Object>> payrollList = user.loadPayrollList(
                    selectedDates[0], selectedDates[1], status);
        DefaultTableModel model = (DefaultTableModel) payrollReportTable.getModel();
        model.setRowCount(0);
        boolean hasPending = false;
        for (Map<String, Object> payroll : payrollList) {
            Object data[] = {
                payroll.get("id"),
                payroll.get("employeeNumber"),
                payroll.get("department"),
                payroll.get("name"),
                payroll.get("paymentDate"),
                payroll.get("netPay"),
                payroll.get("status"),
            };

            // Add the row to the table model
            model.addRow(data);
            if ("Pending".equals(payroll.get("status"))) {
                hasPending = true;
            }
        }
        calculate.setEnabled(hasPending);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane9 = new javax.swing.JScrollPane();
        payrollReportTable = new javax.swing.JTable();
        payrollReport = new javax.swing.JLabel();
        selectPeriod = new javax.swing.JLabel();
        selectPeriodValue = new javax.swing.JComboBox<>();
        selectStatus = new javax.swing.JLabel();
        selectStatusValue = new javax.swing.JComboBox<>();
        calculate = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(860, 590));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        payrollReportTable.setAutoCreateRowSorter(true);
        payrollReportTable.setBackground(new java.awt.Color(255, 255, 255));
        payrollReportTable.setForeground(new java.awt.Color(0, 0, 0));
        payrollReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"180001", "10001", "Executive", "Manuel III A.", "05/15/2024", "26,000.00", "Completed"},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "PAYROLL ID", "EMPLOYEE ID", "DEPARTMENT", "NAME", "DATE OF PAYMENT", "EARNINGS", "STATUS"
            }
        ));
        payrollReportTable.setGridColor(new java.awt.Color(102, 102, 102));
        payrollReportTable.setSelectionBackground(new java.awt.Color(0, 0, 153));
        payrollReportTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        payrollReportTable.setShowGrid(true);
        jScrollPane9.setViewportView(payrollReportTable);

        add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 860, 460));

        payrollReport.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        payrollReport.setForeground(new java.awt.Color(0, 0, 204));
        payrollReport.setText("Payroll");
        add(payrollReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 170, -1));

        selectPeriod.setForeground(new java.awt.Color(0, 0, 0));
        selectPeriod.setText("Select Period");
        selectPeriod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        add(selectPeriod, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 110, 30));

        selectPeriodValue.setBackground(new java.awt.Color(255, 255, 255));
        selectPeriodValue.setForeground(new java.awt.Color(0, 0, 0));
        selectPeriodValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        selectPeriodValue.setLightWeightPopupEnabled(false);
        selectPeriodValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPeriodValueActionPerformed(evt);
            }
        });
        add(selectPeriodValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 230, 30));

        selectStatus.setForeground(new java.awt.Color(0, 0, 0));
        selectStatus.setText("Select Status");
        selectStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        add(selectStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 110, 30));

        selectStatusValue.setBackground(new java.awt.Color(255, 255, 255));
        selectStatusValue.setForeground(new java.awt.Color(0, 0, 0));
        selectStatusValue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Completed", "Pending" }));
        selectStatusValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        selectStatusValue.setLightWeightPopupEnabled(false);
        selectStatusValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStatusValueActionPerformed(evt);
            }
        });
        add(selectStatusValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, 230, 30));

        calculate.setBackground(new java.awt.Color(255, 255, 255));
        calculate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        calculate.setForeground(new java.awt.Color(0, 0, 204));
        calculate.setIcon(new javax.swing.ImageIcon("C:\\Users\\Alex Resurreccion\\Documents\\NetBeansProjects\\OOPMotorPhPayrollSystem\\resources\\calculator.png")); // NOI18N
        calculate.setText("Calculate");
        calculate.setBorder(null);
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });
        add(calculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 70, 100, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void selectPeriodValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPeriodValueActionPerformed
        loadPayrollData();
    }//GEN-LAST:event_selectPeriodValueActionPerformed

    private void selectStatusValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStatusValueActionPerformed
        loadPayrollData();
    }//GEN-LAST:event_selectStatusValueActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        Date[] selectedDates = getSelectedWeekDates();
        boolean isSuccess = user.processPayroll(selectedDates[0], selectedDates[1]);
        if(isSuccess){
            loadPayrollData();
            // success message?
        } else {
            //Display fail?
        }
    }//GEN-LAST:event_calculateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculate;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel payrollReport;
    private javax.swing.JTable payrollReportTable;
    private javax.swing.JLabel selectPeriod;
    private javax.swing.JComboBox<String> selectPeriodValue;
    private javax.swing.JLabel selectStatus;
    private javax.swing.JComboBox<String> selectStatusValue;
    // End of variables declaration//GEN-END:variables
}
